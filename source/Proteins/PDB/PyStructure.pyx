# Written in 2018 by Dr. Robert Pantazes. Copyright owned by Auburn
# University. 
# This file contains the implementation of a Python extension type for the C++
# structure class, which is generated by PDB file objects

# Cython compiler directives
# cython: c_string_type=str
# cython: c_string_encoding=ascii
# cython: language_level=3
# distutils: language=c++

# Include the standard Python modules
import os
import sys

# Include the Protein Error class
from Proteins.ProteinError import ProteinError

# Include the PyProtein wrapper and the Protein class
from Proteins.Protein.PyProtein cimport PyProtein
from Proteins.Proteins cimport Protein

# Include the C++ string class
from libcpp.string cimport string

# Define the Structure class
cdef class PyStructure:

    def __cinit__ (self):
        """C-level initialization of a PyStructure object"""
        # Set the pointer to NULL and the flag to do not delete
        self._thisptr = NULL
        self.delete_flag = False
        # Otherwise, don't do anything. This class will always be spawned from
        # the PyPDB class and won't be initialized in other ways

    def __dealloc__ (self):
        """If necessary (it shouldn't ever be), deallocate memory"""
        if self._thisptr != NULL and self.delete_flag:
            del self._thisptr

    def __init__ (self):
        """Initialize a PyStructure object"""
        # Don't do ANYTHING
        pass

    cdef void _check_for_null (self):
        """Check to see if the PyStructure has a Null pointer"""
        if self._thisptr == NULL:
            text = "Operations cannot be performed on an unallocated "
            text += "PyStructure.\n"
            raise ProteinError (text)

    def proteins (self):
        """The number of proteins in the structure"""
        self._check_for_null()
        return self._thisptr.proteins()

    def protein (self, int i):
        """Access a protein in the structure"""
        self._check_for_null()
        # Get the pointer
        cdef Protein * ptr = self._thisptr.protein(i)
        # Create a PyProtein object
        cdef PyProtein prot = PyProtein ()
        # Set the pointer and delete flag (even though it should already be
        # false)
        prot._thisptr = ptr
        prot.delete_flag = False
        return prot

    def names (self):
        """The number of names in the structure"""
        self._check_for_null ()
        return self._thisptr.names()

    def name (self, int i):
        """Access a name of the structure"""
        self._check_for_null ()
        return self._thisptr.name(i)

    def __str__ (self):
        """Generate a string representation of the PyStructure."""
        self._check_for_null()
        return self._thisptr.str()

    def select_best (self):
        """Select the best protein in the structure"""
        self._check_for_null()
        # Scores to track the proteins' performance
        cdef double score, bestScore
        bestScore = 0
        # The pointer to the best protein
        cdef Protein * ptr = NULL
        # Looping variables
        cdef size_t i, j
        j = self._thisptr.proteins()
        # Loop through the proteins
        for i in range(j):
            # Get the score of the Protein
            score = self._thisptr.protein(i).score()
            # If it is the best score so far
            if score > bestScore:
                bestScore = score
                ptr = self._thisptr.protein(i)
        # If no protein was selected, raise an error
        if ptr == NULL:
            text = "The Structure select_best method failed to identify a "
            text += "best protein.\n"
            raise ProteinError (text)
        # Return a PyProtein of that protein
        cdef PyProtein prot = PyProtein ()
        prot._thisptr = ptr
        prot.delete_flag = False
        return prot
